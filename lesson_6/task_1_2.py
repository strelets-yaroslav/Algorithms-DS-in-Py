"""Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
в рамках первых трех уроков. Проанализировать результат и определить программы
с наиболее эффективным использованием памяти."""

import sys


# print(sys.version, sys.platform)
# 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)] win32


def show_sizeof(x, level=0):
    print("\t" * level, x.__class__, sys.getsizeof(x), x)
    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for xx in x.items():
                show_sizeof(xx, level + 1)
        elif not isinstance(x, str):
            for xx in x:
                show_sizeof(xx, level + 1)

# при использовании return locals() надо помнить, что использование памяти - это только сами переменные.
# на саму структуру возвращаемых переменных обращать внимания не надо.


def sum_1(n):
    """Нахождение суммы с помощью формулы для n-го члена ряда - в лоб."""
    s = 0
    for i in range(n):
        s += (-1) ** i * 2 ** (-i)
    return locals()


# <class 'dict'> 232 {'n': 100, 's': 0.6666666666666667, 'i': 99}
#  <class 'tuple'> 56 ('n', 100)
# 	 <class 'str'> 50 n
# 	 <class 'int'> 28 100
#  <class 'tuple'> 56 ('s', 0.6666666666666667)
# 	 <class 'str'> 50 s
# 	 <class 'float'> 24 0.6666666666666667
#  <class 'tuple'> 56 ('i', 99)
# 	 <class 'str'> 50 i
# 	 <class 'int'> 28 99

# Вывод: в данном случае использование памяти минимально: используется только 3 переменные:
# 28, 24, 28 байт


def sum_2(n):
    """Оптимизация вычислений через предыдущий член ряда."""
    s = 0
    item = 1
    for i in range(n):
        s += item
        item *= -.5
    return locals()


# <class 'dict'> 232 {'n': 100, 's': 0.6666666666666667, 'item': 7.888609052210118e-31, 'i': 99}
#  <class 'tuple'> 56 ('n', 100)
# 	 <class 'str'> 50 n
# 	 <class 'int'> 28 100
#  <class 'tuple'> 56 ('s', 0.6666666666666667)
# 	 <class 'str'> 50 s
# 	 <class 'float'> 24 0.6666666666666667
#  <class 'tuple'> 56 ('item', 7.888609052210118e-31)
# 	 <class 'str'> 53 item
# 	 <class 'float'> 24 7.888609052210118e-31
#  <class 'tuple'> 56 ('i', 99)
# 	 <class 'str'> 50 i
# 	 <class 'int'> 28 99

# Вывод: в данном случае использование памяти всё ещё минимально - добавилась одна переменная,
# что привело к увеличению производительности.
# 28, 24, 24, 28 байт


def sum_3(n):
    """Попытка использовать 'красоту' оформления кода - должен быть медленнее."""
    row = [1.]
    [row.append(-.5 * row[-1]) for i in range(n - 1)]
    res = sum(row)

    return locals()

# <class 'dict'> 232 {'n': 100, 'res': 0.6666666666666667, 'row': [1.0, -0.5, 0.25, -0.125, 0.0625, -0.03125, 0.015625, -0.0078125, 0.00390625, -0.001953125, 0.0009765625, -0.00048828125, 0.000244140625, -0.0001220703125, 6.103515625e-05, -3.0517578125e-05, 1.52587890625e-05, -7.62939453125e-06, 3.814697265625e-06, -1.9073486328125e-06, 9.5367431640625e-07, -4.76837158203125e-07, 2.384185791015625e-07, -1.1920928955078125e-07, 5.960464477539063e-08, -2.9802322387695312e-08, 1.4901161193847656e-08, -7.450580596923828e-09, 3.725290298461914e-09, -1.862645149230957e-09, 9.313225746154785e-10, -4.656612873077393e-10, 2.3283064365386963e-10, -1.1641532182693481e-10, 5.820766091346741e-11, -2.9103830456733704e-11, 1.4551915228366852e-11, -7.275957614183426e-12, 3.637978807091713e-12, -1.8189894035458565e-12, 9.094947017729282e-13, -4.547473508864641e-13, 2.2737367544323206e-13, -1.1368683772161603e-13, 5.684341886080802e-14, -2.842170943040401e-14, 1.4210854715202004e-14, -7.105427357601002e-15, 3.552713678800501e-15, -1.7763568394002505e-15, 8.881784197001252e-16, -4.440892098500626e-16, 2.220446049250313e-16, -1.1102230246251565e-16, 5.551115123125783e-17, -2.7755575615628914e-17, 1.3877787807814457e-17, -6.938893903907228e-18, 3.469446951953614e-18, -1.734723475976807e-18, 8.673617379884035e-19, -4.336808689942018e-19, 2.168404344971009e-19, -1.0842021724855044e-19, 5.421010862427522e-20, -2.710505431213761e-20, 1.3552527156068805e-20, -6.776263578034403e-21, 3.3881317890172014e-21, -1.6940658945086007e-21, 8.470329472543003e-22, -4.235164736271502e-22, 2.117582368135751e-22, -1.0587911840678754e-22, 5.293955920339377e-23, -2.6469779601696886e-23, 1.3234889800848443e-23, -6.617444900424222e-24, 3.308722450212111e-24, -1.6543612251060553e-24, 8.271806125530277e-25, -4.1359030627651384e-25, 2.0679515313825692e-25, -1.0339757656912846e-25, 5.169878828456423e-26, -2.5849394142282115e-26, 1.2924697071141057e-26, -6.462348535570529e-27, 3.2311742677852644e-27, -1.6155871338926322e-27, 8.077935669463161e-28, -4.0389678347315804e-28, 2.0194839173657902e-28, -1.0097419586828951e-28, 5.048709793414476e-29, -2.524354896707238e-29, 1.262177448353619e-29, -6.310887241768095e-30, 3.1554436208840472e-30, -1.5777218104420236e-30]}
#  <class 'tuple'> 56 ('n', 100)
# 	 <class 'str'> 50 n
# 	 <class 'int'> 28 100
#  <class 'tuple'> 56 ('res', 0.6666666666666667)
# 	 <class 'str'> 52 res
# 	 <class 'float'> 24 0.6666666666666667
#  <class 'tuple'> 56 ('row', [1.0, -0.5, 0.25, -0.125, 0.0625, -0.03125, 0.015625, -0.0078125, 0.00390625, -0.001953125, 0.0009765625, -0.00048828125, 0.000244140625, -0.0001220703125, 6.103515625e-05, -3.0517578125e-05, 1.52587890625e-05, -7.62939453125e-06, 3.814697265625e-06, -1.9073486328125e-06, 9.5367431640625e-07, -4.76837158203125e-07, 2.384185791015625e-07, -1.1920928955078125e-07, 5.960464477539063e-08, -2.9802322387695312e-08, 1.4901161193847656e-08, -7.450580596923828e-09, 3.725290298461914e-09, -1.862645149230957e-09, 9.313225746154785e-10, -4.656612873077393e-10, 2.3283064365386963e-10, -1.1641532182693481e-10, 5.820766091346741e-11, -2.9103830456733704e-11, 1.4551915228366852e-11, -7.275957614183426e-12, 3.637978807091713e-12, -1.8189894035458565e-12, 9.094947017729282e-13, -4.547473508864641e-13, 2.2737367544323206e-13, -1.1368683772161603e-13, 5.684341886080802e-14, -2.842170943040401e-14, 1.4210854715202004e-14, -7.105427357601002e-15, 3.552713678800501e-15, -1.7763568394002505e-15, 8.881784197001252e-16, -4.440892098500626e-16, 2.220446049250313e-16, -1.1102230246251565e-16, 5.551115123125783e-17, -2.7755575615628914e-17, 1.3877787807814457e-17, -6.938893903907228e-18, 3.469446951953614e-18, -1.734723475976807e-18, 8.673617379884035e-19, -4.336808689942018e-19, 2.168404344971009e-19, -1.0842021724855044e-19, 5.421010862427522e-20, -2.710505431213761e-20, 1.3552527156068805e-20, -6.776263578034403e-21, 3.3881317890172014e-21, -1.6940658945086007e-21, 8.470329472543003e-22, -4.235164736271502e-22, 2.117582368135751e-22, -1.0587911840678754e-22, 5.293955920339377e-23, -2.6469779601696886e-23, 1.3234889800848443e-23, -6.617444900424222e-24, 3.308722450212111e-24, -1.6543612251060553e-24, 8.271806125530277e-25, -4.1359030627651384e-25, 2.0679515313825692e-25, -1.0339757656912846e-25, 5.169878828456423e-26, -2.5849394142282115e-26, 1.2924697071141057e-26, -6.462348535570529e-27, 3.2311742677852644e-27, -1.6155871338926322e-27, 8.077935669463161e-28, -4.0389678347315804e-28, 2.0194839173657902e-28, -1.0097419586828951e-28, 5.048709793414476e-29, -2.524354896707238e-29, 1.262177448353619e-29, -6.310887241768095e-30, 3.1554436208840472e-30, -1.5777218104420236e-30])
# 	 <class 'str'> 52 row
# 	 <class 'list'> 920 [1.0, -0.5, 0.25, -0.125, 0.0625, -0.03125, 0.015625, -0.0078125, 0.00390625, -0.001953125, 0.0009765625, -0.00048828125, 0.000244140625, -0.0001220703125, 6.103515625e-05, -3.0517578125e-05, 1.52587890625e-05, -7.62939453125e-06, 3.814697265625e-06, -1.9073486328125e-06, 9.5367431640625e-07, -4.76837158203125e-07, 2.384185791015625e-07, -1.1920928955078125e-07, 5.960464477539063e-08, -2.9802322387695312e-08, 1.4901161193847656e-08, -7.450580596923828e-09, 3.725290298461914e-09, -1.862645149230957e-09, 9.313225746154785e-10, -4.656612873077393e-10, 2.3283064365386963e-10, -1.1641532182693481e-10, 5.820766091346741e-11, -2.9103830456733704e-11, 1.4551915228366852e-11, -7.275957614183426e-12, 3.637978807091713e-12, -1.8189894035458565e-12, 9.094947017729282e-13, -4.547473508864641e-13, 2.2737367544323206e-13, -1.1368683772161603e-13, 5.684341886080802e-14, -2.842170943040401e-14, 1.4210854715202004e-14, -7.105427357601002e-15, 3.552713678800501e-15, -1.7763568394002505e-15, 8.881784197001252e-16, -4.440892098500626e-16, 2.220446049250313e-16, -1.1102230246251565e-16, 5.551115123125783e-17, -2.7755575615628914e-17, 1.3877787807814457e-17, -6.938893903907228e-18, 3.469446951953614e-18, -1.734723475976807e-18, 8.673617379884035e-19, -4.336808689942018e-19, 2.168404344971009e-19, -1.0842021724855044e-19, 5.421010862427522e-20, -2.710505431213761e-20, 1.3552527156068805e-20, -6.776263578034403e-21, 3.3881317890172014e-21, -1.6940658945086007e-21, 8.470329472543003e-22, -4.235164736271502e-22, 2.117582368135751e-22, -1.0587911840678754e-22, 5.293955920339377e-23, -2.6469779601696886e-23, 1.3234889800848443e-23, -6.617444900424222e-24, 3.308722450212111e-24, -1.6543612251060553e-24, 8.271806125530277e-25, -4.1359030627651384e-25, 2.0679515313825692e-25, -1.0339757656912846e-25, 5.169878828456423e-26, -2.5849394142282115e-26, 1.2924697071141057e-26, -6.462348535570529e-27, 3.2311742677852644e-27, -1.6155871338926322e-27, 8.077935669463161e-28, -4.0389678347315804e-28, 2.0194839173657902e-28, -1.0097419586828951e-28, 5.048709793414476e-29, -2.524354896707238e-29, 1.262177448353619e-29, -6.310887241768095e-30, 3.1554436208840472e-30, -1.5777218104420236e-30]
# 		 <class 'float'> 24 1.0
# 		 <class 'float'> 24 -0.5
# 		 <class 'float'> 24 0.25
# 		 <class 'float'> 24 -0.125
# 		 <class 'float'> 24 0.0625
# 		 <class 'float'> 24 -0.03125
# 		 <class 'float'> 24 0.015625
# 		 <class 'float'> 24 -0.0078125
# 		 <class 'float'> 24 0.00390625
# 		 <class 'float'> 24 -0.001953125
# 		 <class 'float'> 24 0.0009765625
# 		 <class 'float'> 24 -0.00048828125
# 		 <class 'float'> 24 0.000244140625
# 		 <class 'float'> 24 -0.0001220703125
# 		 <class 'float'> 24 6.103515625e-05
# 		 <class 'float'> 24 -3.0517578125e-05
# 		 <class 'float'> 24 1.52587890625e-05
# 		 <class 'float'> 24 -7.62939453125e-06
# 		 <class 'float'> 24 3.814697265625e-06
# 		 <class 'float'> 24 -1.9073486328125e-06
# 		 <class 'float'> 24 9.5367431640625e-07
# 		 <class 'float'> 24 -4.76837158203125e-07
# 		 <class 'float'> 24 2.384185791015625e-07
# 		 <class 'float'> 24 -1.1920928955078125e-07
# 		 <class 'float'> 24 5.960464477539063e-08
# 		 <class 'float'> 24 -2.9802322387695312e-08
# 		 <class 'float'> 24 1.4901161193847656e-08
# 		 <class 'float'> 24 -7.450580596923828e-09
# 		 <class 'float'> 24 3.725290298461914e-09
# 		 <class 'float'> 24 -1.862645149230957e-09
# 		 <class 'float'> 24 9.313225746154785e-10
# 		 <class 'float'> 24 -4.656612873077393e-10
# 		 <class 'float'> 24 2.3283064365386963e-10
# 		 <class 'float'> 24 -1.1641532182693481e-10
# 		 <class 'float'> 24 5.820766091346741e-11
# 		 <class 'float'> 24 -2.9103830456733704e-11
# 		 <class 'float'> 24 1.4551915228366852e-11
# 		 <class 'float'> 24 -7.275957614183426e-12
# 		 <class 'float'> 24 3.637978807091713e-12
# 		 <class 'float'> 24 -1.8189894035458565e-12
# 		 <class 'float'> 24 9.094947017729282e-13
# 		 <class 'float'> 24 -4.547473508864641e-13
# 		 <class 'float'> 24 2.2737367544323206e-13
# 		 <class 'float'> 24 -1.1368683772161603e-13
# 		 <class 'float'> 24 5.684341886080802e-14
# 		 <class 'float'> 24 -2.842170943040401e-14
# 		 <class 'float'> 24 1.4210854715202004e-14
# 		 <class 'float'> 24 -7.105427357601002e-15
# 		 <class 'float'> 24 3.552713678800501e-15
# 		 <class 'float'> 24 -1.7763568394002505e-15
# 		 <class 'float'> 24 8.881784197001252e-16
# 		 <class 'float'> 24 -4.440892098500626e-16
# 		 <class 'float'> 24 2.220446049250313e-16
# 		 <class 'float'> 24 -1.1102230246251565e-16
# 		 <class 'float'> 24 5.551115123125783e-17
# 		 <class 'float'> 24 -2.7755575615628914e-17
# 		 <class 'float'> 24 1.3877787807814457e-17
# 		 <class 'float'> 24 -6.938893903907228e-18
# 		 <class 'float'> 24 3.469446951953614e-18
# 		 <class 'float'> 24 -1.734723475976807e-18
# 		 <class 'float'> 24 8.673617379884035e-19
# 		 <class 'float'> 24 -4.336808689942018e-19
# 		 <class 'float'> 24 2.168404344971009e-19
# 		 <class 'float'> 24 -1.0842021724855044e-19
# 		 <class 'float'> 24 5.421010862427522e-20
# 		 <class 'float'> 24 -2.710505431213761e-20
# 		 <class 'float'> 24 1.3552527156068805e-20
# 		 <class 'float'> 24 -6.776263578034403e-21
# 		 <class 'float'> 24 3.3881317890172014e-21
# 		 <class 'float'> 24 -1.6940658945086007e-21
# 		 <class 'float'> 24 8.470329472543003e-22
# 		 <class 'float'> 24 -4.235164736271502e-22
# 		 <class 'float'> 24 2.117582368135751e-22
# 		 <class 'float'> 24 -1.0587911840678754e-22
# 		 <class 'float'> 24 5.293955920339377e-23
# 		 <class 'float'> 24 -2.6469779601696886e-23
# 		 <class 'float'> 24 1.3234889800848443e-23
# 		 <class 'float'> 24 -6.617444900424222e-24
# 		 <class 'float'> 24 3.308722450212111e-24
# 		 <class 'float'> 24 -1.6543612251060553e-24
# 		 <class 'float'> 24 8.271806125530277e-25
# 		 <class 'float'> 24 -4.1359030627651384e-25
# 		 <class 'float'> 24 2.0679515313825692e-25
# 		 <class 'float'> 24 -1.0339757656912846e-25
# 		 <class 'float'> 24 5.169878828456423e-26
# 		 <class 'float'> 24 -2.5849394142282115e-26
# 		 <class 'float'> 24 1.2924697071141057e-26
# 		 <class 'float'> 24 -6.462348535570529e-27
# 		 <class 'float'> 24 3.2311742677852644e-27
# 		 <class 'float'> 24 -1.6155871338926322e-27
# 		 <class 'float'> 24 8.077935669463161e-28
# 		 <class 'float'> 24 -4.0389678347315804e-28
# 		 <class 'float'> 24 2.0194839173657902e-28
# 		 <class 'float'> 24 -1.0097419586828951e-28
# 		 <class 'float'> 24 5.048709793414476e-29
# 		 <class 'float'> 24 -2.524354896707238e-29
# 		 <class 'float'> 24 1.262177448353619e-29
# 		 <class 'float'> 24 -6.310887241768095e-30
# 		 <class 'float'> 24 3.1554436208840472e-30
# 		 <class 'float'> 24 -1.5777218104420236e-30

# Вывод: лаконичность кода и использование генераторов в некоторых случаях приводят к бОльшим расходам памяти.


if __name__ == '__main__':
    n = 100
    show_sizeof(sum_1(n))
    print('*' * 50)
    show_sizeof(sum_2(n))
    print('*' * 50)
    show_sizeof(sum_3(n))
